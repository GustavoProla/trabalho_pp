const Grid = ({ users, setUsers }) => {
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState(null);
  const [currentItemId, setCurrentItemId] = useState(null); // Novo estado para armazenar o item.id
  const ref = useRef();

  const openModal = async (id) => {
    setModalIsOpen(true);
    setSelectedUserId(id);

    try {
      const res = await axios.get(`http://localhost:8800/enviarid?id=${id}`);
      setUsers(res.data.sort((a, b) => (a.nome > b.nome ? 1 : -1)));
      setCurrentItemId(id); // Atualiza o estado com o item.id atual
    } catch (error) {
      toast.error(error.message);
    }
  };

  const closeModal = () => {
    setModalIsOpen(false);
    setSelectedUserId(null);
    setCurrentItemId(null); // Limpa o estado quando o modal é fechado
    console.log('fechou');
  };

  const handleDelete = async (id) => {
    await axios
      .delete(`http://localhost:8800/deletar${id}`)
      .then(({ data }) => {
        const newArray = users.filter((user) => user.id !== id);
        setUsers(newArray);
        toast.success(data);
      })
      .catch(({ data }) => toast.error(data));
  };

  const handleUpdate = async () => {
    const form = ref.current;

    if (form && form.info) {
      const info = form.info.value;
      const id = currentItemId; // Usa o item.id armazenado no estado

      try {
        const req = await axios.put(
          "http://localhost:8800/atualizar",
          { info, id },
          { headers: { "Content-Type": "application/json" } }
        );

        // Restante do código para atualizar o estado com os dados filtrados...
        
        console.log('Update response:', req.data);
      } catch (error) {
        toast.error(error.message);
      }
    } else {
      toast.error("Error updating user info");
    }
  };

  return (
    <>
      <>
      <div>
        <h1>Exemplo de Modal em React</h1>
      </div>
      <table>
        <thead>
          <tr>
            <th>Nome</th>
            <th>Email</th>
            <th>Turma</th>
            <th></th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {users.map((item, i) => (
            <tr key={i}>
              <td>{item.nome}</td>
              <td>{item.email}</td>
              <td>{item.turma}</td>
              
              <td>
                <button onClick={() => openModal(item.id)}>INFO</button>
              </td>
              <td>
                <FaTrash onClick={() => handleDelete(item.id)} />
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {modalIsOpen && selectedUserId && (
        <div className="modal">
          <div className="modal-content">
            <button onClick={() => closeModal()}>Fechar</button>
            <button onClick={() => openModal(false)}>Fechar</button>
            <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>INFO</th>
          </tr>
        </thead>
        <tbody>
        {users.map((item, i) => (
              <tr key={i}>
                <td>{item.id}</td>
                <td>{item.info}</td>
                <td>
                  
                </td>
              </tr>
            ))}
        </tbody>
      </table>
      <form ref={ref}>
                    <input name="info" />
                    <button type="button" onClick={() => handleUpdate(52)}>
                      Atualizar
                    </button>
                  </form>
          </div>
        </div>
      )}
    </>
    </>
  );
};